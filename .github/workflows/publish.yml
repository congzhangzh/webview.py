name: Publish to PyPI

on:
  release:
    types: [published]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev
          python -m pip install --upgrade pip
          pip install build wheel

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          python -m pip install --upgrade pip
          pip install build wheel

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m pip install --upgrade pip
          pip install build wheel

      - name: Download platform binary
        run: |
          python -c "import os, sys; sys.path.append(os.path.join(os.getcwd(), 'src')); from _webview_ffi import _be_sure_libraries; _be_sure_libraries()"

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.5
        env:
          CIBW_SKIP: "cp36-* cp37-* *-win32 *-manylinux_i686 *-musllinux*"  # 跳过旧版本和不需要的平台
          CIBW_BEFORE_BUILD_LINUX: "apt-get update && apt-get install -y libwebkit2gtk-4.0-dev"

      - uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.os }}
          path: dist/*.whl

  publish:
    needs: [build_wheels]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Prepare distribution
        run: |
          mkdir final_dist
          cp dist/*/*.whl final_dist/

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install --upgrade twine
          twine upload final_dist/*.whl
